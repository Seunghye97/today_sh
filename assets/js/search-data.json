{
  
    
        "post0": {
            "title": "Title",
            "content": ". store = {} #물건이름 : product, 개수 : num while True: product = input(&#39;물건이름: &#39;) if product==&#39;&#39; : break num = int(input(&#39;개수: &#39;)) if product in store.keys(): store[product] += num #숫자 더하기 else: store[product] = num print(store) #오름차순 정렬 for key, value in sorted(store.items()): print(key, value, end = &#39; &#39;) . 물건이름: 새우깡 개수: 10 물건이름: 감자깡 개수: 30 물건이름: 수미칩 개수: 10 물건이름: 수미칩 개수: 10 물건이름: {&#39;새우깡&#39;: 10, &#39;감자깡&#39;: 30, &#39;수미칩&#39;: 20} 감자깡 30 새우깡 10 수미칩 20 . #자료들이 순서와 중복없이 저장된 것 #순서가 없으므로 리스트나 튜플로 변환후 -&gt; 인덱스를 사용하면 된다 set_wish = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;양파링&#39;]) set_wish #중복이 삭제됨 . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . set_wish = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;} set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . set_wish = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;]) set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . # 합집합 a.union(b) a|b # 교집합 a.intersection(b) a&amp;b # 차집합 a.difference(b) a-b sweety = {&#39;빼빼로&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;} salty = {&#39;허니버터&#39;, &#39;포카칩&#39;, &#39;새우깡&#39;} #합집합 print(sweety.union(salty)) print(sweety|salty) #교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) #차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . {&#39;새우깡&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;, &#39;포카칩&#39;, &#39;빼빼로&#39;} {&#39;새우깡&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;, &#39;포카칩&#39;, &#39;빼빼로&#39;} {&#39;허니버터&#39;} {&#39;허니버터&#39;} {&#39;빼빼로&#39;, &#39;칸쵸&#39;} {&#39;빼빼로&#39;, &#39;칸쵸&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} . #집합명.add(요소) -한개 추가 #집합명.update(리스트) -여러개 추가 . #집합명. remove(요소) -&gt; 인덱스가 없기때문에 pop등 사용 불가 #존재하지 않는 요소 삭제시 에러 발생 set_wish = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;} if &#39;새우깡&#39; in list(set_wish): #리스트형태로 바꿔서 in 써야함(in 뒤에는 집합 올 수 x) set_wish.remove(&#39;새우깡&#39;) set_wish . {&#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . tem = float(input(&#39;체온을 입력하세요: &#39;)) if tem &gt; 37.5: print(&#39;등교불가&#39;) . 체온을 입력하세요: 38 등교불가 . a = 5 b = 4 if a%b == 0: print(f&#39;{a}는 {b}로 나누어 떨어집니다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a%b}입니다.&#39;) . 5는 4로 나머지가 1입니다. . temp = float(input(&#39;체온: &#39;)) YorN1 = input(&#39;검사결과 대기여부(y/n): &#39;) YorN2 = input(&#39;자가격리 여부(y/n): &#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif YorN1 == &#39;y&#39;: print(&#39;검사대기 중: 등교불가&#39;) elif YorN2 == &#39;y&#39;: print(&#39;자가격리 중: 등교불가&#39;) else: print(&#39;등교가능&#39;) . 체온: 36.5 검사결과 대기여부(y/n): n 자가격리 여부(y/n): y 자가격리 중: 등교불가 . score = int(input(&#39;점수를 입력하세요: &#39;)) if score &gt;= 90: print(&#39;등급:A&#39;) elif score &gt;= 80: print(&#39;등급:B&#39;) elif score &gt;= 70: print(&#39;등급:C&#39;) elif score &gt;= 60: print(&#39;등급:D&#39;) else: print(&#39;등급:F&#39;) #grade 변수에 저장해뒀다가 마지막에만 print를 쓰는 방법도 있음 . 점수를 입력하세요: 50 등급:F . price = int(input(&#39;물건 구매가를 입력하세요: &#39;)) if price &gt;= 100000: per = 0.1 elif price &gt;= 50000: per = 0.075 elif price &gt;= 10000: per = 0.05 else: per = 0 #구간에 없는 부분도 신경쓰자 dc = price*per print(f&#39;구매가: {price}원&#39;) print(f&#39;할인율: {per*100}%&#39;) print(f&#39;할인금액: {int(dc)}원&#39;) #int를 씌워서 소수점 아래는 버리고 깔끔하게 나오기 위함 print(f&#39;지불금액: {int(price-dc)}원&#39;) . 물건 구매가를 입력하세요: 70000 구매가: 70000원 할인율: 7.5% 할인금액: 5250원 지불금액: 64750원 . n1 = int(input(&#39;숫자 1: &#39;)) n2 = int(input(&#39;숫자 2: &#39;)) n3 = int(input(&#39;숫자 3: &#39;)) #elif를 쓰면 안된다. min1 = n1 if n2 &lt; min1: min1 = n2 if n3 &lt; min1: min1 = n3 print(&#39;가장 작은 수&#39;, min1) . 숫자 1: 5 숫자 2: 2 숫자 3: 4 가장 작은 수 2 . age = int(input(&#39;나이를 입력하세요: &#39;)) if age &gt;= 65 or age &lt;= 7: price = 0 elif age &lt;=18: price = 1000 else: price = 3000 print(f&#39;{price}원 입니다.&#39;) . 나이를 입력하세요: 68 0원 입니다. . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; id1 = input(&#39;아이디: &#39;) pw1 = input(&#39;패스워드: &#39;) if id1 == id and pw1==pw: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디: id1234 패스워드: pwd1234 로그인 실패 . num1 = float(input(&#39;숫자1 : &#39;)) num2 = float(input(&#39;숫자2 : &#39;)) operator = input(&#39;연산기호(+, -, *, /) : &#39;) if operator == &#39;+&#39;: result = num1+num2 elif operator == &#39;-&#39;: result = num1-num2 elif operator == &#39;*&#39;: result = num1*num2 elif operator == &#39;/&#39;: if num2 !=0: result = num1/num2 else: result = None print(&#39;-&#39;*50) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . 숫자1 : 3 숫자2 : 4 연산기호(+, -, *, /) : * -- 3.0 * 4.0 = 12.0 . import random dice1 = random.randint(1,6) #정수형으로 바꿔줘야 비교가능 dice2 = random.randint(1,6) if dice1&gt;dice2: win = &#39;주사위1&#39; elif dice1&lt;dice2: win = &#39;주사위2&#39; else: win = &#39;무승부&#39; print(f&#39;주사위1: {dice1}&#39;) print(f&#39;주사위2: {dice2}&#39;) print(f&#39;{win}가 이겼습니다.&#39;) . 주사위1: 6 주사위2: 1 주사위1가 이겼습니다. .",
            "url": "https://seunghye97.github.io/today_sh/2021/05/31/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "relUrl": "/2021/05/31/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": ". store = {} #물건이름 : product, 개수 : num while True: product = input(&#39;물건이름: &#39;) if product==&#39;&#39; : break num = int(input(&#39;개수: &#39;)) if product in store.keys(): store[product] += num #숫자 더하기 else: store[product] = num print(store) #오름차순 정렬 for key, value in sorted(store.items()): print(key, value, end = &#39; &#39;) . 물건이름: 새우깡 개수: 10 물건이름: 감자깡 개수: 30 물건이름: 수미칩 개수: 10 물건이름: 수미칩 개수: 10 물건이름: {&#39;새우깡&#39;: 10, &#39;감자깡&#39;: 30, &#39;수미칩&#39;: 20} 감자깡 30 새우깡 10 수미칩 20 . #자료들이 순서와 중복없이 저장된 것 #순서가 없으므로 리스트나 튜플로 변환후 -&gt; 인덱스를 사용하면 된다 set_wish = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;양파링&#39;]) set_wish #중복이 삭제됨 . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . set_wish = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;} set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . set_wish = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;]) set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . # 합집합 a.union(b) a|b # 교집합 a.intersection(b) a&amp;b # 차집합 a.difference(b) a-b sweety = {&#39;빼빼로&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;} salty = {&#39;허니버터&#39;, &#39;포카칩&#39;, &#39;새우깡&#39;} #합집합 print(sweety.union(salty)) print(sweety|salty) #교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) #차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . {&#39;새우깡&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;, &#39;포카칩&#39;, &#39;빼빼로&#39;} {&#39;새우깡&#39;, &#39;칸쵸&#39;, &#39;허니버터&#39;, &#39;포카칩&#39;, &#39;빼빼로&#39;} {&#39;허니버터&#39;} {&#39;허니버터&#39;} {&#39;빼빼로&#39;, &#39;칸쵸&#39;} {&#39;빼빼로&#39;, &#39;칸쵸&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} . #집합명.add(요소) -한개 추가 #집합명.update(리스트) -여러개 추가 . #집합명. remove(요소) -&gt; 인덱스가 없기때문에 pop등 사용 불가 #존재하지 않는 요소 삭제시 에러 발생 set_wish = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;양파링&#39;, &#39;포카칩&#39;, &#39;칸쵸&#39;} if &#39;새우깡&#39; in list(set_wish): #리스트형태로 바꿔서 in 써야함(in 뒤에는 집합 올 수 x) set_wish.remove(&#39;새우깡&#39;) set_wish . {&#39;양파링&#39;, &#39;오감자&#39;, &#39;칸쵸&#39;, &#39;포카칩&#39;} . tem = float(input(&#39;체온을 입력하세요: &#39;)) if tem &gt; 37.5: print(&#39;등교불가&#39;) . 체온을 입력하세요: 38 등교불가 . a = 5 b = 4 if a%b == 0: print(f&#39;{a}는 {b}로 나누어 떨어집니다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a%b}입니다.&#39;) . 5는 4로 나머지가 1입니다. . temp = float(input(&#39;체온: &#39;)) YorN1 = input(&#39;검사결과 대기여부(y/n): &#39;) YorN2 = input(&#39;자가격리 여부(y/n): &#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif YorN1 == &#39;y&#39;: print(&#39;검사대기 중: 등교불가&#39;) elif YorN2 == &#39;y&#39;: print(&#39;자가격리 중: 등교불가&#39;) else: print(&#39;등교가능&#39;) . 체온: 36.5 검사결과 대기여부(y/n): n 자가격리 여부(y/n): y 자가격리 중: 등교불가 . score = int(input(&#39;점수를 입력하세요: &#39;)) if score &gt;= 90: print(&#39;등급:A&#39;) elif score &gt;= 80: print(&#39;등급:B&#39;) elif score &gt;= 70: print(&#39;등급:C&#39;) elif score &gt;= 60: print(&#39;등급:D&#39;) else: print(&#39;등급:F&#39;) #grade 변수에 저장해뒀다가 마지막에만 print를 쓰는 방법도 있음 . 점수를 입력하세요: 50 등급:F . price = int(input(&#39;물건 구매가를 입력하세요: &#39;)) if price &gt;= 100000: per = 0.1 elif price &gt;= 50000: per = 0.075 elif price &gt;= 10000: per = 0.05 else: per = 0 #구간에 없는 부분도 신경쓰자 dc = price*per print(f&#39;구매가: {price}원&#39;) print(f&#39;할인율: {per*100}%&#39;) print(f&#39;할인금액: {int(dc)}원&#39;) #int를 씌워서 소수점 아래는 버리고 깔끔하게 나오기 위함 print(f&#39;지불금액: {int(price-dc)}원&#39;) . 물건 구매가를 입력하세요: 70000 구매가: 70000원 할인율: 7.5% 할인금액: 5250원 지불금액: 64750원 . n1 = int(input(&#39;숫자 1: &#39;)) n2 = int(input(&#39;숫자 2: &#39;)) n3 = int(input(&#39;숫자 3: &#39;)) #elif를 쓰면 안된다. min1 = n1 if n2 &lt; min1: min1 = n2 if n3 &lt; min1: min1 = n3 print(&#39;가장 작은 수&#39;, min1) . 숫자 1: 5 숫자 2: 2 숫자 3: 4 가장 작은 수 2 . age = int(input(&#39;나이를 입력하세요: &#39;)) if age &gt;= 65 or age &lt;= 7: price = 0 elif age &lt;=18: price = 1000 else: price = 3000 print(f&#39;{price}원 입니다.&#39;) . 나이를 입력하세요: 68 0원 입니다. . id = &#39;ID1234&#39; pw = &#39;PWD1234&#39; id1 = input(&#39;아이디: &#39;) pw1 = input(&#39;패스워드: &#39;) if id1 == id and pw1==pw: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디: id1234 패스워드: pwd1234 로그인 실패 . num1 = float(input(&#39;숫자1 : &#39;)) num2 = float(input(&#39;숫자2 : &#39;)) operator = input(&#39;연산기호(+, -, *, /) : &#39;) if operator == &#39;+&#39;: result = num1+num2 elif operator == &#39;-&#39;: result = num1-num2 elif operator == &#39;*&#39;: result = num1*num2 elif operator == &#39;/&#39;: if num2 !=0: result = num1/num2 else: result = None print(&#39;-&#39;*50) print(f&#39;{num1} {operator} {num2} = {result}&#39;) . 숫자1 : 3 숫자2 : 4 연산기호(+, -, *, /) : * -- 3.0 * 4.0 = 12.0 . import random dice1 = random.randint(1,6) #정수형으로 바꿔줘야 비교가능 dice2 = random.randint(1,6) if dice1&gt;dice2: win = &#39;주사위1&#39; elif dice1&lt;dice2: win = &#39;주사위2&#39; else: win = &#39;무승부&#39; print(f&#39;주사위1: {dice1}&#39;) print(f&#39;주사위2: {dice2}&#39;) print(f&#39;{win}가 이겼습니다.&#39;) . 주사위1: 6 주사위2: 1 주사위1가 이겼습니다. .",
            "url": "https://seunghye97.github.io/today_sh/2021/05/30/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "relUrl": "/2021/05/30/3%ED%8C%80_%EC%A0%84%EC%8A%B9%ED%98%9C.html",
            "date": " • May 30, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seunghye97.github.io/today_sh/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://seunghye97.github.io/today_sh/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://seunghye97.github.io/today_sh/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://seunghye97.github.io/today_sh/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}